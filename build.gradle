apply plugin: 'java-library'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

repositories {
    mavenLocal()
    mavenCentral()
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2' }
    }

    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:2.0.80"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.4.1.3373"
    }
}

dependencies {
    implementation "net.serenity-bdd:serenity-junit:4.1.20"
    implementation "net.serenity-bdd:serenity-core:4.1.20"
    implementation "net.serenity-bdd:serenity-screenplay:4.1.20"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:4.1.20"
    implementation "net.serenity-bdd:serenity-cucumber:4.1.20"

    implementation "org.slf4j:slf4j-simple:2.0.13"
    implementation "com.google.guava:guava:23.0"
    implementation "org.apache.poi:poi:3.17"
    implementation "org.apache.poi:poi-ooxml:3.17"

    testImplementation "junit:junit:4.13.1"
    testImplementation "io.github.bonigarcia:webdrivermanager:5.9.2"
}

sourceSets {
    main {
        java { srcDirs = ['src/main/java'] }
        resources { srcDirs = ['src/main/resources'] }
    }
    test {
        java { srcDirs = ['test/java'] }
        resources { srcDirs = ['test/resources'] }
    }
}

jacoco {
    toolVersion = "0.8.10"
}

test {
    useJUnit()
    ignoreFailures = true
    finalizedBy jacocoTestReport
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

gradle.startParameter.continueOnFailure = true

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
    finalizedBy 'aggregate'
}

sonarqube {
    properties {

        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "lopezman08-1"
        property "sonar.projectKey",   "lopezman08_Taller_Metodologico_SQA"
        property "sonar.projectName",  "Taller_Metodologico_SQA"

        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests",   "test/java"

        property "sonar.junit.reportPaths", "build/test-results/test"

        property "sonar.coverage.jacoco.xmlReportPaths",
                "build/reports/jacoco/test/jacocoTestReport.xml"

        property "sonar.exclusions",      "**/build/**, **/.gradle/**, **/resources/**"
        property "sonar.test.exclusions", "**/resources/**"
    }
}

tasks.named("sonar") {
    dependsOn("test", "jacocoTestReport")
}

ext {
    sonarOrg     = findProperty("sonar.organization") ?: "lopezman08-1"
    sonarProject = findProperty("sonar.projectKey")   ?: "lopezman08_Taller_Metodologico_SQA"
}

tasks.register("sonarExport", Exec) {
    workingDir project.projectDir
    if (System.getProperty("os.name").toLowerCase().contains("win")) {
        commandLine "powershell", "-NoProfile", "-ExecutionPolicy", "Bypass",
                "-File", "scripts/sonar-export.ps1",
                "-OrgKey", sonarOrg,
                "-ProjectKey", sonarProject
    } else {
        commandLine "pwsh", "-NoProfile", "-ExecutionPolicy", "Bypass",
                "-File", "scripts/sonar-export.ps1",
                "-OrgKey", sonarOrg,
                "-ProjectKey", sonarProject
    }

    environment "SONAR_TOKEN", System.getenv("SONAR_TOKEN") ?: (findProperty("sonar.token") ?: "")
    doFirst {
        if (!environment["SONAR_TOKEN"]) {
            throw new GradleException("Falta SONAR_TOKEN (define env var SONAR_TOKEN o -Dsonar.token=...)")
        }
    }
}

tasks.named("sonar").configure {
    finalizedBy tasks.named("sonarExport")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

